<!DOCTYPE html>
<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

  <title>interpreter - The Go Programming Language</title>

<link type="text/css" rel="stylesheet" href="interpreter_files/style.css">
<script async="" src="interpreter_files/cbgapi.loaded_1"></script><script async="" src="interpreter_files/cbgapi.loaded_0"></script><script gapi_processed="true" src="interpreter_files/plusone.js" async="" type="text/javascript"></script><script type="text/javascript" src="interpreter_files/jquery.js"></script>
<script type="text/javascript">window.jQuery || document.write(unescape("%3Cscript src='/doc/jquery.js' type='text/javascript'%3E%3C/script%3E"));</script>

<script type="text/javascript" src="interpreter_files/godocs.txt"></script>

</head>
<body>

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="/search">
<div style="min-width: 650px;" id="menu">
<a href="http://localhost:6060/doc/">Documents</a>
<a href="http://localhost:6060/ref/">References</a>
<a href="http://localhost:6060/pkg/">Packages</a>
<a href="http://localhost:6060/project/">The Project</a>
<a href="http://localhost:6060/help/">Help</a>

<input id="search" name="q" class="inactive" value="Search" placeholder="Search" type="text">
</div>
<div id="heading"><a href="http://localhost:6060/">The Go Programming Language</a></div>
</form>

</div></div>



<div tabindex="-1" style="outline: 0px none;" id="page" class="wide">
<div class="container">


  <div id="plusone"><div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 24px; height: 15px;"><iframe title="+1" data-gapiattached="true" src="interpreter_files/fastbutton.htm" name="I0_1384611961068" id="I0_1384611961068" vspace="0" tabindex="0" style="position: static; top: 0px; width: 24px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 15px;" marginwidth="0" marginheight="0" hspace="0" frameborder="0" scrolling="no" width="100%"></iframe></div></div>
  <h1>Package interpreter</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "colder/interpreter"</code></dd>
			</dl>
			<dl>
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
			</div>
			<div class="expanded">
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
				
			</div>
		</div>
		

		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
		</div>
		<div class="expanded">
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
			
			
			
				
				<dd><a href="#EndToken">type EndToken</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#EndToken.GetType">func (a *EndToken) GetType() string</a></dd>
				
			
				
				<dd><a href="#Expr">type Expr</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Expr.Analyze">func (a *Expr) Analyze(tokenbox *TokenBox, indentlevel int) *Sentence</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Expr.GetType">func (a *Expr) GetType() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Expr.Run">func (a *Expr) Run(a *NameTable)</a></dd>
				
			
				
				<dd><a href="#InputMachine">type InputMachine</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewInputMachine">func NewInputMachine() *InputMachine</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#InputMachine.BackSpace">func (a *InputMachine) BackSpace(file *File)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#InputMachine.GetNextChar">func (a *InputMachine) GetNextChar(file *File) byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#InputMachine.HasNextChar">func (a *InputMachine) HasNextChar(file *File) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#InputMachine.SetRecord">func (a *InputMachine) SetRecord(file *File)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#InputMachine.SetRestore">func (a *InputMachine) SetRestore(file *File)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#InputMachine.SkipSpace">func (a *InputMachine) SkipSpace(file *File)</a></dd>
				
			
				
				<dd><a href="#IntegerToken">type IntegerToken</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#IntegerToken.GetType">func (a *IntegerToken) GetType() string</a></dd>
				
			
				
				<dd><a href="#KeywordToken">type KeywordToken</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#KeywordToken.GetType">func (a *KeywordToken) GetType() string</a></dd>
				
			
				
				<dd><a href="#NameTable">type NameTable</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewNameTable">func NewNameTable() *NameTable</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#NameTable.GetValue">func (a *NameTable) GetValue(name string) int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NameTable.ReportError">func (a *NameTable) ReportError(toreport string)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NameTable.SetValue">func (a *NameTable) SetValue(name string, value int)</a></dd>
				
			
				
				<dd><a href="#OperatorToken">type OperatorToken</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#OperatorToken.GetType">func (a *OperatorToken) GetType() string</a></dd>
				
			
				
				<dd><a href="#Sentence">type Sentence</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Sentence.Analyze">func (a *Sentence) Analyze(tokenbox *TokenBox, indentlevel int) *Sentence</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Sentence.GetType">func (a *Sentence) GetType() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#Sentence.Run">func (a *Sentence) Run(a *NameTable)</a></dd>
				
			
				
				<dd><a href="#SeparatorToken">type SeparatorToken</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#SeparatorToken.GetType">func (a *SeparatorToken) GetType() string</a></dd>
				
			
				
				<dd><a href="#StringToken">type StringToken</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#StringToken.GetType">func (a *StringToken) GetType() string</a></dd>
				
			
				
				<dd><a href="#Token">type Token</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#Token.GetType">func (a *Token) GetType() string</a></dd>
				
			
				
				<dd><a href="#TokenBox">type TokenBox</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#NewTokenBox">func NewTokenBox() *TokenBox</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#TokenBox.DeleteComment">func (a *TokenBox) DeleteComment()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TokenBox.GetPreviousToken">func (a *TokenBox) GetPreviousToken() *Token</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TokenBox.GetToken">func (a *TokenBox) GetToken() *Token</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TokenBox.GiveBackToken">func (a *TokenBox) GiveBackToken()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TokenBox.HasNextToken">func (a *TokenBox) HasNextToken() bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TokenBox.SetBegin">func (a *TokenBox) SetBegin()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="#TokenBox.Show">func (a *TokenBox) Show()</a></dd>
				
			
				
				<dd><a href="#TokenFactory">type TokenFactory</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="#TokenFactory.CreateToken">func (a *TokenFactory) CreateToken(key string) *Token</a></dd>
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		

		
			<h4>Package files</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go">Sentence.go</a>
			
				<a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go">Token.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		
		
		
		
			
			
			<h2 id="EndToken">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=766:800#L36">EndToken</a></h2>
			<pre>type EndToken struct {
    *<a href="#Token">Token</a>
}</pre>
			<p>
结束符标识
</p>


			

			

			

			

			
				
				<h3 id="EndToken.GetType">func (*EndToken) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=824:859#L40">GetType</a></h3>
				<pre>func (a *<a href="#EndToken">EndToken</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
复写基类函数
</p>

				
				
			
		
			
			
			<h2 id="Expr">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=309:341#L5">Expr</a></h2>
			<pre>type Expr struct {
    *<a href="#Sentence">Sentence</a>
}</pre>
			<p>
表达式句型
</p>


			

			

			

			

			
				
				<h3 id="Expr.Analyze">func (*Expr) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=484:552#L14">Analyze</a></h3>
				<pre>func (a *<a href="#Expr">Expr</a>) Analyze(tokenbox *<a href="#TokenBox">TokenBox</a>, indentlevel <a href="http://localhost:6060/pkg/builtin/#int">int</a>) *<a href="#Sentence">Sentence</a></pre>
				<p>
重写基类方法
</p>

				
				
			
				
				<h3 id="Expr.GetType">func (*Expr) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=367:398#L10">GetType</a></h3>
				<pre>func (a *<a href="#Expr">Expr</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
重写基类方法
</p>

				
				
			
				
				<h3 id="Expr.Run">func (*Expr) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=425:457#L12">Run</a></h3>
				<pre>func (a *<a href="#Expr">Expr</a>) Run(a *<a href="#NameTable">NameTable</a>)</pre>
				<p>
重写基类方法
</p>

				
				
			
		
			
			
			<h2 id="InputMachine">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1029:1075#L51">InputMachine</a></h2>
			<pre>type InputMachine struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
文件读取机
</p>


			

			

			

			
				
				<h3 id="NewInputMachine">func <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1110:1146#L56">NewInputMachine</a></h3>
				<pre>func NewInputMachine() *<a href="#InputMachine">InputMachine</a></pre>
				<p>
创建一个文件读取机
</p>

				
			

			
				
				<h3 id="InputMachine.BackSpace">func (*InputMachine) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1543:1587#L68">BackSpace</a></h3>
				<pre>func (a *<a href="#InputMachine">InputMachine</a>) BackSpace(file *<a href="#File">File</a>)</pre>
				<p>
退后一格
</p>

				
				
			
				
				<h3 id="InputMachine.GetNextChar">func (*InputMachine) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1406:1457#L64">GetNextChar</a></h3>
				<pre>func (a *<a href="#InputMachine">InputMachine</a>) GetNextChar(file *<a href="#File">File</a>) <a href="http://localhost:6060/pkg/builtin/#byte">byte</a></pre>
				<p>
获取下一个字符
</p>

				
				
			
				
				<h3 id="InputMachine.HasNextChar">func (*InputMachine) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1179:1230#L58">HasNextChar</a></h3>
				<pre>func (a *<a href="#InputMachine">InputMachine</a>) HasNextChar(file *<a href="#File">File</a>) <a href="http://localhost:6060/pkg/builtin/#bool">bool</a></pre>
				<p>
是否有下一个字符
</p>

				
				
			
				
				<h3 id="InputMachine.SetRecord">func (*InputMachine) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1257:1301#L60">SetRecord</a></h3>
				<pre>func (a *<a href="#InputMachine">InputMachine</a>) SetRecord(file *<a href="#File">File</a>)</pre>
				<p>
记录当前位置
</p>

				
				
			
				
				<h3 id="InputMachine.SetRestore">func (*InputMachine) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1331:1376#L62">SetRestore</a></h3>
				<pre>func (a *<a href="#InputMachine">InputMachine</a>) SetRestore(file *<a href="#File">File</a>)</pre>
				<p>
恢复上一次位置
</p>

				
				
			
				
				<h3 id="InputMachine.SkipSpace">func (*InputMachine) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1478:1522#L66">SkipSpace</a></h3>
				<pre>func (a *<a href="#InputMachine">InputMachine</a>) SkipSpace(file *<a href="#File">File</a>)</pre>
				<p>
跳过空格
</p>

				
				
			
		
			
			
			<h2 id="IntegerToken">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=383:420#L15">IntegerToken</a></h2>
			<pre>type IntegerToken struct {
    *<a href="#Token">Token</a>
}</pre>
			<p>
整数标识
</p>


			

			

			

			

			
				
				<h3 id="IntegerToken.GetType">func (*IntegerToken) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=444:483#L19">GetType</a></h3>
				<pre>func (a *<a href="#IntegerToken">IntegerToken</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
复写基类函数
</p>

				
				
			
		
			
			
			<h2 id="KeywordToken">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=135:172#L1">KeywordToken</a></h2>
			<pre>type KeywordToken struct {
    *<a href="#Token">Token</a>
}</pre>
			<p>
关键字
</p>


			

			

			

			

			
				
				<h3 id="KeywordToken.GetType">func (*KeywordToken) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=196:235#L5">GetType</a></h3>
				<pre>func (a *<a href="#KeywordToken">KeywordToken</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
复写基类函数
</p>

				
				
			
		
			
			
			<h2 id="NameTable">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=577:628#L17">NameTable</a></h2>
			<pre>type NameTable struct {
    <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
字符映射表
</p>


			

			

			

			
				
				<h3 id="NewNameTable">func <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=657:687#L22">NewNameTable</a></h3>
				<pre>func NewNameTable() *<a href="#NameTable">NameTable</a></pre>
				<p>
新建字符映射表
</p>

				
			

			
				
				<h3 id="NameTable.GetValue">func (*NameTable) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=726:771#L24">GetValue</a></h3>
				<pre>func (a *<a href="#NameTable">NameTable</a>) GetValue(name <a href="http://localhost:6060/pkg/builtin/#string">string</a>) <a href="http://localhost:6060/pkg/builtin/#int">int</a></pre>
				<p>
获取对应变量名称的值
</p>

				
				
			
				
				<h3 id="NameTable.ReportError">func (*NameTable) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=874:922#L28">ReportError</a></h3>
				<pre>func (a *<a href="#NameTable">NameTable</a>) ReportError(toreport <a href="http://localhost:6060/pkg/builtin/#string">string</a>)</pre>
				<p>
报错
</p>

				
				
			
				
				<h3 id="NameTable.SetValue">func (*NameTable) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=807:859#L26">SetValue</a></h3>
				<pre>func (a *<a href="#NameTable">NameTable</a>) SetValue(name <a href="http://localhost:6060/pkg/builtin/#string">string</a>, value <a href="http://localhost:6060/pkg/builtin/#int">int</a>)</pre>
				<p>
修改对应变量名的值
</p>

				
				
			
		
			
			
			<h2 id="OperatorToken">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=506:545#L22">OperatorToken</a></h2>
			<pre>type OperatorToken struct {
    *<a href="#Token">Token</a>
}</pre>
			<p>
符号标识
</p>


			

			

			

			

			
				
				<h3 id="OperatorToken.GetType">func (*OperatorToken) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=569:609#L26">GetType</a></h3>
				<pre>func (a *<a href="#OperatorToken">OperatorToken</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
复写基类函数
</p>

				
				
			
		
			
			
			<h2 id="Sentence">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=39:63#L1">Sentence</a></h2>
			<pre>type Sentence struct {
}</pre>
			<p>
句型基类
</p>


			

			

			

			

			
				
				<h3 id="Sentence.Analyze">func (*Sentence) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=211:283#L2">Analyze</a></h3>
				<pre>func (a *<a href="#Sentence">Sentence</a>) Analyze(tokenbox *<a href="#TokenBox">TokenBox</a>, indentlevel <a href="http://localhost:6060/pkg/builtin/#int">int</a>) *<a href="#Sentence">Sentence</a></pre>
				<p>
分析该句型
</p>

				
				
			
				
				<h3 id="Sentence.GetType">func (*Sentence) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=83:118#L1">GetType</a></h3>
				<pre>func (a *<a href="#Sentence">Sentence</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
获取类型
</p>

				
				
			
				
				<h3 id="Sentence.Run">func (*Sentence) <a href="http://localhost:6060/src/pkg/colder/interpreter/Sentence.go?s=151:187#L1">Run</a></h3>
				<pre>func (a *<a href="#Sentence">Sentence</a>) Run(a *<a href="#NameTable">NameTable</a>)</pre>
				<p>
解释并执行该句型
</p>

				
				
			
		
			
			
			<h2 id="SeparatorToken">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=635:675#L29">SeparatorToken</a></h2>
			<pre>type SeparatorToken struct {
    *<a href="#Token">Token</a>
}</pre>
			<p>
分隔符标识
</p>


			

			

			

			

			
				
				<h3 id="SeparatorToken.GetType">func (*SeparatorToken) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=699:740#L33">GetType</a></h3>
				<pre>func (a *<a href="#SeparatorToken">SeparatorToken</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
复写基类函数
</p>

				
				
			
		
			
			
			<h2 id="StringToken">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=261:298#L8">StringToken</a></h2>
			<pre>type StringToken struct {
    *<a href="#Token">Token</a>
}</pre>
			<p>
字符串标识
</p>


			

			

			

			

			
				
				<h3 id="StringToken.GetType">func (*StringToken) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=322:360#L12">GetType</a></h3>
				<pre>func (a *<a href="#StringToken">StringToken</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
复写基类函数
</p>

				
				
			
		
			
			
			<h2 id="Token">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=39:62#L1">Token</a></h2>
			<pre>type Token struct {
}</pre>
			<p>
语法单元
</p>


			

			

			

			

			
				
				<h3 id="Token.GetType">func (*Token) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=83:115#L1">GetType</a></h3>
				<pre>func (a *<a href="#Token">Token</a>) GetType() <a href="http://localhost:6060/pkg/builtin/#string">string</a></pre>
				<p>
获取其类型
</p>

				
				
			
		
			
			
			<h2 id="TokenBox">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1612:1653#L71">TokenBox</a></h2>
			<pre>type TokenBox struct {
    Tokens <a href="#List">List</a>
}</pre>
			<p>
存储Token类
</p>


			

			

			

			
				
				<h3 id="NewTokenBox">func <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1681:1709#L76">NewTokenBox</a></h3>
				<pre>func NewTokenBox() *<a href="#TokenBox">TokenBox</a></pre>
				<p>
新建一个Token类
</p>

				
			

			
				
				<h3 id="TokenBox.DeleteComment">func (*TokenBox) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1730:1764#L78">DeleteComment</a></h3>
				<pre>func (a *<a href="#TokenBox">TokenBox</a>) DeleteComment()</pre>
				<p>
删除注释
</p>

				
				
			
				
				<h3 id="TokenBox.GetPreviousToken">func (*TokenBox) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1999:2043#L86">GetPreviousToken</a></h3>
				<pre>func (a *<a href="#TokenBox">TokenBox</a>) GetPreviousToken() *<a href="#Token">Token</a></pre>
				<p>
获取前一个语法单元
</p>

				
				
			
				
				<h3 id="TokenBox.GetToken">func (*TokenBox) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1927:1963#L84">GetToken</a></h3>
				<pre>func (a *<a href="#TokenBox">TokenBox</a>) GetToken() *<a href="#Token">Token</a></pre>
				<p>
获取下一个语法单元
</p>

				
				
			
				
				<h3 id="TokenBox.GiveBackToken">func (*TokenBox) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=2076:2110#L88">GiveBackToken</a></h3>
				<pre>func (a *<a href="#TokenBox">TokenBox</a>) GiveBackToken()</pre>
				<p>
退回一个语法单元
</p>

				
				
			
				
				<h3 id="TokenBox.HasNextToken">func (*TokenBox) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1803:1841#L80">HasNextToken</a></h3>
				<pre>func (a *<a href="#TokenBox">TokenBox</a>) HasNextToken() <a href="http://localhost:6060/pkg/builtin/#bool">bool</a></pre>
				<p>
是否有下一个语法单元
</p>

				
				
			
				
				<h3 id="TokenBox.SetBegin">func (*TokenBox) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=1862:1891#L82">SetBegin</a></h3>
				<pre>func (a *<a href="#TokenBox">TokenBox</a>) SetBegin()</pre>
				<p>
回到开始
</p>

				
				
			
				
				<h3 id="TokenBox.Show">func (*TokenBox) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=2140:2165#L90">Show</a></h3>
				<pre>func (a *<a href="#TokenBox">TokenBox</a>) Show()</pre>
				<p>
打印当前的状态
</p>

				
				
			
		
			
			
			<h2 id="TokenFactory">type <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=894:924#L43">TokenFactory</a></h2>
			<pre>type TokenFactory struct {
}</pre>
			<p>
生成标识符的工厂
</p>


			

			

			

			

			
				
				<h3 id="TokenFactory.CreateToken">func (*TokenFactory) <a href="http://localhost:6060/src/pkg/colder/interpreter/Token.go?s=950:1003#L48">CreateToken</a></h3>
				<pre>func (a *<a href="#TokenFactory">TokenFactory</a>) CreateToken(key <a href="http://localhost:6060/pkg/builtin/#string">string</a>) *<a href="#Token">Token</a></pre>
				<p>
创建一个工厂
</p>

				
				
			
		
	

	









<div id="footer">
Build version go1.1.2.<br>
Except as <a href="http://code.google.com/policies.html#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="http://localhost:6060/LICENSE">BSD license</a>.<br>
<a href="http://localhost:6060/doc/tos.html">Terms of Service</a> | 
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>

</div><!-- .container -->
</div><!-- #page -->


<script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script>


<iframe style="width: 1px; height: 1px; position: absolute; top: -100px;" src="interpreter_files/postmessageRelay.htm" id="oauth2relay378983098" name="oauth2relay378983098"></iframe></body></html>